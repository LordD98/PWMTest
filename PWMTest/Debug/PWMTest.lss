
PWMTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000655  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ca  00000000  00000000  000007f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028b  00000000  00000000  00000dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000104c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000336  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  000013a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
				// 1 1 0/1 1 1 clock on T0 rising/falling edge
	DDRB;	// output (DDR_OC0 to 1)
	*/

	//TCCR0 = 0;
	TCCR0 |= (1<<WGM01)|(1<<WGM00);
  6c:	83 b7       	in	r24, 0x33	; 51
  6e:	88 64       	ori	r24, 0x48	; 72
  70:	83 bf       	out	0x33, r24	; 51
	
	TCCR0 |= (1<<COM01);
  72:	83 b7       	in	r24, 0x33	; 51
  74:	80 62       	ori	r24, 0x20	; 32
  76:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1<<COM00);
  78:	83 b7       	in	r24, 0x33	; 51
  7a:	8f 7e       	andi	r24, 0xEF	; 239
  7c:	83 bf       	out	0x33, r24	; 51
	
	TCCR0 &= ~(1<<CS02);
  7e:	83 b7       	in	r24, 0x33	; 51
  80:	8b 7f       	andi	r24, 0xFB	; 251
  82:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1<<CS01);
  84:	83 b7       	in	r24, 0x33	; 51
  86:	8d 7f       	andi	r24, 0xFD	; 253
  88:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<CS00);
  8a:	83 b7       	in	r24, 0x33	; 51
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	83 bf       	out	0x33, r24	; 51
	

	DDRB |= (1<< DDB3);
  90:	bb 9a       	sbi	0x17, 3	; 23

	OCR0 = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8c bf       	out	0x3c, r24	; 60
	
	unsigned char val = 0;
	signed char step = 1;
  96:	91 e0       	ldi	r25, 0x01	; 1

	DDRB |= (1<< DDB3);

	OCR0 = 0xFF;
	
	unsigned char val = 0;
  98:	80 e0       	ldi	r24, 0x00	; 0
    while (1) 
    {
		OCR0 = val;
		val = (unsigned char)((signed char)val + step);
		if(val == 255)
			step = -1;
  9a:	3f ef       	ldi	r19, 0xFF	; 255
		else if(val == 0)
			step = 1;
  9c:	21 e0       	ldi	r18, 0x01	; 1
	
	unsigned char val = 0;
	signed char step = 1;
    while (1) 
    {
		OCR0 = val;
  9e:	8c bf       	out	0x3c, r24	; 60
		val = (unsigned char)((signed char)val + step);
  a0:	89 0f       	add	r24, r25
		if(val == 255)
  a2:	8f 3f       	cpi	r24, 0xFF	; 255
  a4:	21 f0       	breq	.+8      	; 0xae <main+0x42>
			step = -1;
		else if(val == 0)
  a6:	81 11       	cpse	r24, r1
  a8:	03 c0       	rjmp	.+6      	; 0xb0 <main+0x44>
			step = 1;
  aa:	92 2f       	mov	r25, r18
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <main+0x44>
    while (1) 
    {
		OCR0 = val;
		val = (unsigned char)((signed char)val + step);
		if(val == 255)
			step = -1;
  ae:	93 2f       	mov	r25, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	e3 e3       	ldi	r30, 0x33	; 51
  b2:	fb e2       	ldi	r31, 0x2B	; 43
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x48>
  b8:	f2 cf       	rjmp	.-28     	; 0x9e <main+0x32>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
